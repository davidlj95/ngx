name: Docs
on:
  workflow_call:
    secrets:
      cloudflare-account-id:
        required: true
      cloudflare-api-token:
        required: true

env:
  DOCS_DIR: projects/ngx-meta/docs
  # ðŸ‘‡ Keep in sync with API Extractor workflow
  API_DOCS_ARTIFACT_NAME_SUFFIX: -api-docs
  # ðŸ‘‡ Keep in sync with pull request completed workflow
  BUNDLE_SIZE_ARTIFACT_NAME_SUFFIX: -bundle-size

permissions:
  contents: none

jobs:
  docs:
    name: Docs build & deploy
    defaults:
      run:
        working-directory: ${{ env.DOCS_DIR }}
    runs-on: ubuntu-latest
    timeout-minutes: 5
    if: |
      (github.event_name == 'push' && github.ref_name == 'main') ||
      (
        github.event_name == 'pull_request' &&
        contains(github.event.pull_request.labels.*.name, 'preview docs')
      )
    permissions:
      deployments: write
    steps:
      - name: Checkout
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4
      #- name: Download API reference docs
      #  uses: actions/download-artifact@d3f86a106a0bac45b974a628896c90dbdf5c8093 # v4
      #  with:
      #    name: ngx-meta${{ env.API_DOCS_ARTIFACT_NAME_SUFFIX }}
      #    path: projects/ngx-meta/docs/content/api
      #- name: Download bundle size info
      #  uses: actions/download-artifact@d3f86a106a0bac45b974a628896c90dbdf5c8093 # v4
      #  with:
      #    pattern: ngx-meta${{ env.BUNDLE_SIZE_ARTIFACT_NAME_SUFFIX }}*
      #- name: Copy reports into directories
      #  working-directory: .
      #  run: |
      #    # shellcheck disable=SC2001
      #    for artifact_dir in "ngx-meta${{ env.BUNDLE_SIZE_ARTIFACT_NAME_PREFIX }}"*; do
      #      app_name="$(echo "$artifact_dir" | sed "s/^ngx-meta${{ env.BUNDLE_SIZE_ARTIFACT_NAME_SUFFIX }}-//")"
      #      bundle_size_app_dir="projects/ngx-meta/bundle-size/out/$app_name"
      #      mkdir -p "$bundle_size_app_dir"
      #      cp "$artifact_dir/bundle-size-report.md" "$bundle_size_app_dir"
      #    done
      - name: Install poetry # pipx comes built-in in GitHub runner
        run: pipx install poetry
      - name: Setup Python
        uses: actions/setup-python@a26af69be951a213d495a4c3e4e4022e16d87065 # v5
        with:
          python-version-file: ${{ env.DOCS_DIR }}/pyproject.toml
          cache: poetry
          cache-dependency-path: ${{ env.DOCS_DIR }}/poetry.lock
      - name: Setup pnpm
        uses: pnpm/action-setup@a7487c7e89a18df4991f7f222e4898a00d66ddda # v4.1.0
      - name: Setup Node.js
        uses: actions/setup-node@49933ea5288caeca8642d1e84afbd3f7d6820020 # v4
        with:
          cache: pnpm
          cache-dependency-path: ${{ env.DOCS_DIR }}/pnpm-lock.yaml
          node-version-file: .node-version
      - name: Install deps
        run: make setup
      - name: Generate cache id for Mkdocs build
        run: echo "cache_id=$(date --utc '+%V')" >> "$GITHUB_ENV"
      - name: Cache Mkdocs build
        uses: actions/cache@5a3ec84eff668545956fd18022155c47e93e2684 # v4
        with:
          key: mkdocs-material-${{ env.cache_id }}
          path: ${{ env.DOCS_DIR }}/.cache
          restore-keys: |
            mkdocs-material-
      #- name: Build
      #  run: make build
      #- name: Publish
      #  uses: cloudflare/pages-action@f0a1cd58cd66095dee69bfa18fa5efd1dde93bca # 1
      #  with:
      #    accountId: ${{ secrets.cloudflare-account-id }}
      #    apiToken: ${{ secrets.cloudflare-api-token }}
      #    # Somehow if this is not set, it deploys to production when building on a PR
      #    # https://github.com/cloudflare/pages-action/issues/97
      #    branch: ${{ github.head_ref || github.ref_name }}
      #    projectName: ngx-meta
      #    directory: site
      #    workingDirectory: ${{ env.DOCS_DIR }}
      #    gitHubToken: ${{ secrets.GITHUB_TOKEN }}
